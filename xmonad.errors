$ ghc --make xmonad.hs -i -ilib -fforce-recomp -main-is main -dynamic -v0 -outputdir /home/anapal/.xmonad/build-x86_64-linux -o /home/anapal/.xmonad/xmonad-x86_64-linux

xmonad.hs:295:34: error:
    • Couldn't match type ‘Event’ with ‘XConfig a’
      Expected: XConfig a -> XConfig a
        Actual: Event -> X All
    • In the second argument of ‘(<+>)’, namely ‘spotifyWindowNameFix’
      In the expression: ewmhFullscreen <+> spotifyWindowNameFix
      In an equation for ‘myEventHook’:
          myEventHook = ewmhFullscreen <+> spotifyWindowNameFix
    • Relevant bindings include
        myEventHook :: XConfig a -> XConfig a (bound at xmonad.hs:295:1)
    |
295 | myEventHook = ewmhFullscreen <+> spotifyWindowNameFix
    |                                  ^^^^^^^^^^^^^^^^^^^^

xmonad.hs:325:49: error:
    • Couldn't match expected type: Query (Endo WindowSet)
                  with actual type: PP -> PP
    • Probable cause: ‘filterOutWsPP’ is applied to too few arguments
      In the second argument of ‘(<+>)’, namely
        ‘filterOutWsPP [myScratchpads]’
      In the ‘manageHook’ field of a record
      In the first argument of ‘ewmh’, namely
        ‘desktopConfig
           {terminal = myTerminal, modMask = myModMask,
            workspaces = myWorkspaces, borderWidth = myBorderWidth,
            normalBorderColor = myNormalBorderColor,
            focusedBorderColor = myFocusedBorderColor, keys = myKeys,
            layoutHook = myLayout,
            manageHook = myManageHook <+> filterOutWsPP [myScratchpads],
            handleEventHook = myEventHook,
            logHook = dynamicLogWithPP . namedScratchpadFilterOutWorkspacePP
                        $ def
                            {ppOutput = hPutStrLn xmproc,
                             ppCurrent = xmobarColor "#4381fb" "" . wrap "[" "]",
                             ppVisible = xmobarColor "#4381fb" "",
                             ppHidden = xmobarColor "#d1426e" "" . wrap "*" "",
                             ppHiddenNoWindows = xmobarColor "#061d8e" "",
                             ppTitle = xmobarColor "#ffffff" "" . shorten 60,
                             ppSep = "<fc=#666666> | </fc>", ppWsSep = "<fc=#666666> . </fc>",
                             ppExtras = [windowCount],
                             ppOrder = \ (ws : l : t : ex) -> [...] ++ ex ++ [...]},
            startupHook = myStartupHook}’
    |
325 |         , manageHook         = myManageHook <+> filterOutWsPP [myScratchpads]
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

xmonad.hs:325:64: error:
    • Couldn't match type ‘NamedScratchpad’ with ‘Char’
      Expected: WorkspaceId
        Actual: [NamedScratchpad]
    • In the expression: myScratchpads
      In the first argument of ‘filterOutWsPP’, namely ‘[myScratchpads]’
      In the second argument of ‘(<+>)’, namely
        ‘filterOutWsPP [myScratchpads]’
    |
325 |         , manageHook         = myManageHook <+> filterOutWsPP [myScratchpads]
    |                                                                ^^^^^^^^^^^^^

xmonad.hs:326:32: error:
    • Couldn't match type ‘XConfig a1’ with ‘Event’
      Expected: Event -> X All
        Actual: XConfig a1 -> XConfig a1
    • In the ‘handleEventHook’ field of a record
      In the first argument of ‘ewmh’, namely
        ‘desktopConfig
           {terminal = myTerminal, modMask = myModMask,
            workspaces = myWorkspaces, borderWidth = myBorderWidth,
            normalBorderColor = myNormalBorderColor,
            focusedBorderColor = myFocusedBorderColor, keys = myKeys,
            layoutHook = myLayout,
            manageHook = myManageHook <+> filterOutWsPP [myScratchpads],
            handleEventHook = myEventHook,
            logHook = dynamicLogWithPP . namedScratchpadFilterOutWorkspacePP
                        $ def
                            {ppOutput = hPutStrLn xmproc,
                             ppCurrent = xmobarColor "#4381fb" "" . wrap "[" "]",
                             ppVisible = xmobarColor "#4381fb" "",
                             ppHidden = xmobarColor "#d1426e" "" . wrap "*" "",
                             ppHiddenNoWindows = xmobarColor "#061d8e" "",
                             ppTitle = xmobarColor "#ffffff" "" . shorten 60,
                             ppSep = "<fc=#666666> | </fc>", ppWsSep = "<fc=#666666> . </fc>",
                             ppExtras = [windowCount],
                             ppOrder = \ (ws : l : t : ex) -> [...] ++ ex ++ [...]},
            startupHook = myStartupHook}’
      In the second argument of ‘($)’, namely
        ‘ewmh
           desktopConfig
             {terminal = myTerminal, modMask = myModMask,
              workspaces = myWorkspaces, borderWidth = myBorderWidth,
              normalBorderColor = myNormalBorderColor,
              focusedBorderColor = myFocusedBorderColor, keys = myKeys,
              layoutHook = myLayout,
              manageHook = myManageHook <+> filterOutWsPP [myScratchpads],
              handleEventHook = myEventHook,
              logHook = dynamicLogWithPP . namedScratchpadFilterOutWorkspacePP
                          $ def
                              {ppOutput = hPutStrLn xmproc,
                               ppCurrent = xmobarColor "#4381fb" "" . wrap "[" "]",
                               ppVisible = xmobarColor "#4381fb" "",
                               ppHidden = xmobarColor "#d1426e" "" . wrap "*" "",
                               ppHiddenNoWindows = xmobarColor "#061d8e" "",
                               ppTitle = xmobarColor "#ffffff" "" . shorten 60,
                               ppSep = "<fc=#666666> | </fc>", ppWsSep = "<fc=#666666> . </fc>",
                               ppExtras = [windowCount],
                               ppOrder = \ (ws : l : t : ex) -> [...] ++ ex ++ [...]},
              startupHook = myStartupHook}’
    |
326 |         , handleEventHook    = myEventHook
    |                                ^^^^^^^^^^^
